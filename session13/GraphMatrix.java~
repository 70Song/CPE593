import java.util.Stack;
public class GraphMatrix {
	private double[][] w;
	private int V;
	public GraphMatrix(int V) {
		w = new double[V][V];
		this.V = V;
    for (int i = 0; i < V; i++)
			for (int j = 0; j < V; j++)		
				w[i][j] = Double.POSITIVE_INFINITY;
	}
	public void set(int i, int j, double w) {
		this.w[i][j] = w;
		this.w[j][i] = w;
	}
	public double adjacent(int i, int j) {
		return w[i][j];
	}
	public void DFS(int v) {
		boolean visited = new boolean[V]; // all false in Java
		Stack<Integer> todo = new Stack<>();
		visited[v] = true;
		todo.push(v);
		while (!todo.isEmpty()) {
			int v = todo.pop();
			System.out.print(v);
			for (int j = 0; j < V; j++)
				if (j != v && w[v][j] < Double.POSITIVE_INFINITY && !visited[j]) {
          visited[j] = true;
					todo.push(j);
				}
		}
	}

}
